/*
 * Copyright 2014-2018 Real Logic Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '2.0.4' apply false
}

defaultTasks 'clean', 'build', 'shadowJar', 'install'

def aeronGroup = 'io.aeron'
def aeronVersion = file('version.txt').text.trim()

def agronaVersion = '0.9.20'
def sbeVersion = '1.8.3'

group = aeronGroup
version = aeronVersion
ext.isReleasedVersion = !version.endsWith("SNAPSHOT")

ext {
    group = aeronGroup
    version = aeronVersion

    if (!project.hasProperty('ossrhUsername')) {
        ossrhUsername = ''
    }

    if (!project.hasProperty('ossrhPassword')) {
        ossrhPassword = ''
    }
}

def projectPom = {
    name = 'aeron'
    packaging = 'pom'
    // optionally artifactId can be defined here
    description = 'Efficient reliable UDP unicast, UDP multicast, and IPC transport protocol.'
    url = 'https://github.com/real-logic/aeron'

    scm {
        connection = 'scm:git:https://github.com/real-logic/aeron.git'
        developerConnection = 'scm:git:https://github.com/real-logic/aeron.git'
        url = 'https://github.com/real-logic/aeron.git'
    }

    licenses {
        license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            id = 'tmontgomery'
            name = 'Todd L. Montgomery'
            email = 'tmont@nard.net'
            url = 'https://github.com/tmontgomery'
        }
        developer {
            id = 'mjpt777'
            name = 'Martin Thompson'
            email = 'mjpt777@gmail.com'
            url = 'https://github.com/mjpt777'
        }
        developer {
            id = 'RichardWarburton'
            name = 'Richard Warburton'
            email = 'richard.warburton@gmail.com'
            url = 'https://github.com/RichardWarburton'
        }
        developer {
            id = 'nitsanw'
            name = 'Nitsan Wakart'
            email = 'nitsanw@yahoo.com'
            url = 'https://github.com/nitsanw'
        }
    }
}

configurations {
    shadow
}

jar.enabled = false

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'
    apply plugin: 'signing'
    apply plugin: 'eclipse'

    group = aeronGroup
    version = aeronVersion

    jar.enabled = true

    dependencies {
        checkstyle 'com.puppycrawl.tools:checkstyle:8.11'

        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-core:2.19.0'
        testCompile 'org.hamcrest:hamcrest-library:1.3'
    }

    checkstyle {
        configFile = new File(rootDir, 'config/checkstyle/checkstyle.xml')
        toolVersion = '8.11'
    }

    compileJava {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    compileTestJava {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    test {
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }

    javadoc {
        title = '<h1>Aeron Message Transport</h1>'
        options.bottom = '<i>Copyright &#169; 2014-2018 Real Logic Ltd. All Rights Reserved.</i>'
        if (JavaVersion.current() == JavaVersion.VERSION_1_10) {
            options.addBooleanOption 'html5', true
        }
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    configurations {
        tests
    }

    artifacts {
        tests testJar
    }

    jar {
        manifest.attributes(
            'Implementation-Title' : 'Aeron',
            'Implementation-Version' : "${aeronVersion}",
            'Implementation-Vendor' : 'Real Logic Limited')
    }

    signing {
        required { isReleasedVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
}

project(':aeron-client') {
    apply plugin: 'osgi'

    dependencies {
        compile "org.agrona:agrona:${agronaVersion}"
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':aeron-driver') {
    apply plugin: 'application'
    apply plugin: 'osgi'

    mainClassName = 'io.aeron.driver.MediaDriver'

    dependencies {
        compile project(':aeron-client')
        testCompile project(':aeron-client')
    }

    test {
        systemProperties('aeron.event.log': System.properties['aeron.event.log'])
    }

    run {
        systemProperties(System.properties)
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    javadoc {
        source += project(':aeron-client').sourceSets.main.allJava
        source += sourceSets.main.allJava

        classpath += configurations.compile
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    build.doLast {
        distZip
    }
}

project(':aeron-agent') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':aeron-client')
        compile project(':aeron-driver')
        compile "net.bytebuddy:byte-buddy:1.8.10"
    }

    jar {
        manifest.attributes(
            "Premain-Class": "io.aeron.agent.EventLogAgent",
            "Agent-Class": "io.aeron.agent.EventLogAgent",
            "Can-Redefine-Classes": "true",
            "Can-Retransform-Classes": "true")
    }

    shadowJar {
        dependencies {
            exclude(project(':aeron-client'))
            exclude(project(':aeron-driver'))
            exclude(dependency('org.agrona:agrona'))
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    uploadShadow {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }

        mustRunAfter 'uploadArchives'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { isReleasedVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.shadow
    }
}

project(':aeron-archive') {
    apply plugin: 'osgi'

    configurations{
        codecGeneration
    }

    dependencies {
        compile project(':aeron-client')
        compile project(':aeron-driver')
        compile files('build/classes/java/generated')
        codecGeneration "uk.co.real-logic:sbe-tool:${sbeVersion}"
    }

    def generatedDir = file("${buildDir}/generated-src")
    sourceSets {
        generated.java.srcDir generatedDir
    }

    compileJava.dependsOn 'compileGeneratedJava'
    compileGeneratedJava.dependsOn 'generateCodecs'
    compileGeneratedJava.classpath += configurations.codecGeneration

    task generateCodecs(type: JavaExec) {
        main = 'uk.co.real_logic.sbe.SbeTool'
        classpath = configurations.codecGeneration
        systemProperties(
            'sbe.output.dir': generatedDir,
            'sbe.target.language': 'Java',
            'sbe.validation.xsd': 'src/main/resources/fpl/sbe.xsd',
            'sbe.validation.stop.on.error': 'true')
        args = ['src/main/resources/aeron-archive-codecs.xml',
                'src/main/resources/aeron-archive-mark-codecs.xml']
    }

    test {
        systemProperties(
            'aeron.shared.idle.strategy' : 'org.agrona.concurrent.YieldingIdleStrategy',
            'aeron.conductor.idle.strategy' : 'org.agrona.concurrent.YieldingIdleStrategy',
            'aeron.sender.idle.strategy' : 'org.agrona.concurrent.YieldingIdleStrategy',
            'aeron.receiver.idle.strategy' : 'org.agrona.concurrent.YieldingIdleStrategy',
            'aeron.use.windows.high.res.timer' : 'true',
            'aeron.dir.warn.if.exists': 'false',
            'aeron.dir.delete.on.start' : 'true',
            'aeron.term.buffer.sparse.file': 'true',
            'aeron.perform.storage.checks' : 'false')
    }

    javadoc {
        source += project(':aeron-client').sourceSets.main.allJava
        source += project(':aeron-driver').sourceSets.main.allJava
        source += sourceSets.main.allJava
        source += sourceSets.generated.allJava

        classpath += configurations.compile
    }

    jar {
        from("${buildDir}/classes/java/generated") {
            include '**/*.class'
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
        from sourceSets.generated.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':aeron-cluster') {
    apply plugin: 'osgi'

    configurations{
        codecGeneration
    }

    dependencies {
        compile project(':aeron-client')
        compile project(':aeron-driver')
        compile project(':aeron-archive')
        compile files('build/classes/java/generated')
        codecGeneration "uk.co.real-logic:sbe-tool:${sbeVersion}"
    }

    def generatedDir = file("${buildDir}/generated-src")
    sourceSets {
        generated.java.srcDir generatedDir
    }

    compileJava.dependsOn 'compileGeneratedJava'
    compileGeneratedJava.dependsOn 'generateCodecs'
    compileGeneratedJava.classpath += configurations.codecGeneration

    task generateCodecs(type: JavaExec) {
        main = 'uk.co.real_logic.sbe.SbeTool'
        classpath = configurations.codecGeneration
        systemProperties(
            'sbe.output.dir': generatedDir,
            'sbe.target.language': 'Java',
            'sbe.validation.xsd': 'src/main/resources/fpl/sbe.xsd',
            'sbe.validation.stop.on.error': 'true')
        args = ['src/main/resources/aeron-cluster-codecs.xml',
                'src/main/resources/aeron-cluster-mark-codecs.xml']
    }

    test {
        systemProperties(
            'aeron.shared.idle.strategy' : 'org.agrona.concurrent.YieldingIdleStrategy',
            'aeron.conductor.idle.strategy' : 'org.agrona.concurrent.YieldingIdleStrategy',
            'aeron.sender.idle.strategy' : 'org.agrona.concurrent.YieldingIdleStrategy',
            'aeron.receiver.idle.strategy' : 'org.agrona.concurrent.YieldingIdleStrategy',
            'aeron.use.windows.high.res.timer' : 'true',
            'aeron.dir.warn.if.exists': 'false',
            'aeron.dir.delete.on.start' : 'true',
            'aeron.term.buffer.sparse.file': 'true',
            'aeron.perform.storage.checks' : 'false')
    }

    javadoc {
        source += project(':aeron-client').sourceSets.main.allJava
        source += project(':aeron-driver').sourceSets.main.allJava
        source += project(':aeron-archive').sourceSets.main.allJava
        source += project(':aeron-archive').sourceSets.generated.allJava
        source += sourceSets.main.allJava
        source += sourceSets.generated.allJava

        classpath += configurations.compile
    }

    jar {
        from("${buildDir}/classes/java/generated") {
            include '**/*.class'
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
        from sourceSets.generated.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':aeron-samples') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':aeron-client')
        compile project(':aeron-driver')
        compile project(':aeron-archive')
        compile 'org.hdrhistogram:HdrHistogram:2.1.10'
    }

    shadowJar {
        archiveName = 'samples.jar'
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { isReleasedVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.shadow
    }
}

project(':aeron-system-tests') {
    dependencies {
        compile project(':aeron-client')
        compile project(':aeron-driver')
        compile project(':aeron-archive')
        testCompile project(path: ':aeron-client', configuration: 'tests')
        testCompile project(path: ':aeron-archive', configuration: 'tests')
    }

    test {
        systemProperties(
        'aeron.shared.idle.strategy' : 'org.agrona.concurrent.YieldingIdleStrategy',
        'aeron.conductor.idle.strategy' : 'org.agrona.concurrent.YieldingIdleStrategy',
        'aeron.sender.idle.strategy' : 'org.agrona.concurrent.YieldingIdleStrategy',
        'aeron.receiver.idle.strategy' : 'org.agrona.concurrent.YieldingIdleStrategy',
        'aeron.use.windows.high.res.timer' : 'true',
        'aeron.dir.delete.on.start' : 'true',
        'aeron.dir.warn.if.exists': 'false',
        'aeron.term.buffer.sparse.file': 'true',
        'aeron.perform.storage.checks' : 'false')
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.test.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':aeron-all') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':aeron-client')
        compile project(':aeron-driver')
        compile project(':aeron-archive')
        compile project(':aeron-cluster')
        compile project(':aeron-samples')
    }

    javadoc {
        source += project(':aeron-client').sourceSets.main.allJava
        source += project(':aeron-driver').sourceSets.main.allJava
        source += project(':aeron-archive').sourceSets.main.allJava
        source += project(':aeron-archive').sourceSets.generated.allJava
        source += project(':aeron-cluster').sourceSets.main.allJava
        source += project(':aeron-cluster').sourceSets.generated.allJava
        source += project(':aeron-agent').sourceSets.main.allJava
        source += project(':aeron-samples').sourceSets.main.allJava

        classpath += project(':aeron-client').configurations.compile
        classpath += project(':aeron-driver').configurations.compile
        classpath += project(':aeron-archive').configurations.compile
        classpath += project(':aeron-cluster').configurations.compile
        classpath += project(':aeron-agent').configurations.compile
        classpath += project(':aeron-samples').configurations.compile
    }

    shadowJar {
        manifest.attributes(
            'Implementation-Title' : 'Aeron',
            'Implementation-Version' : "${aeronVersion}",
            'Implementation-Vendor' : 'Real Logic Limited')
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    uploadShadow {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }

        mustRunAfter 'uploadArchives'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from project(':aeron-client').sourceSets.main.allSource
        from project(':aeron-driver').sourceSets.main.allSource
        from project(':aeron-agent').sourceSets.main.allSource
        from project(':aeron-archive').sourceSets.main.allSource
        from project(':aeron-archive').sourceSets.generated.allSource
        from project(':aeron-cluster').sourceSets.main.allSource
        from project(':aeron-cluster').sourceSets.generated.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    shadowJar {
        classifier = ''
        relocate 'org.HdrHistogram', 'io.aeron.shadow.org.HdrHistogram'
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { isReleasedVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.shadow
    }
}

task uploadToMavenCentral {
    dependsOn 'aeron-client:uploadArchives',
        'aeron-driver:uploadArchives',
        'aeron-samples:uploadArchives',
        'aeron-system-tests:uploadArchives',
        'aeron-archive:uploadArchives',
        'aeron-all:uploadArchives',
        'aeron-all:uploadShadow',
        'aeron-agent:uploadArchives',
        'aeron-agent:uploadShadow',
        'aeron-cluster:uploadArchives'
}

wrapper {
    gradleVersion = '4.8.1'
    distributionType = 'ALL'
}
